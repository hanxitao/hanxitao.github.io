<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hanxitao.github.io/</id><title>Layman</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-08-11T23:42:31+08:00</updated> <author> <name>hanxitao</name> <uri>https://hanxitao.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hanxitao.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://hanxitao.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 hanxitao </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>LeetCode之删除每行中的最大值</title><link href="https://hanxitao.github.io/posts/%E5%88%A0%E9%99%A4%E6%AF%8F%E8%A1%8C%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/" rel="alternate" type="text/html" title="LeetCode之删除每行中的最大值" /><published>2022-07-27T01:11:00+08:00</published> <updated>2022-07-27T01:11:00+08:00</updated> <id>https://hanxitao.github.io/posts/%E5%88%A0%E9%99%A4%E6%AF%8F%E8%A1%8C%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</id> <content src="https://hanxitao.github.io/posts/%E5%88%A0%E9%99%A4%E6%AF%8F%E8%A1%8C%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/" /> <author> <name>hanxitao</name> </author> <category term="LeetCode" /> <summary> 一、题目：删除每行中的最大值 给定一个 m x n 大小的矩阵 grid ，由若干正整数组成。 执行下述操作，直到 grid 变为空矩阵： 从每一行删除值最大的元素。如果存在多个这样的值，删除其中任何一个。 将删除元素中的最大值与答案相加。 二、示例 示例： 输入：grid = [[1,2,4],[3,3,1]] 输出：8 三、代码 var deleteGreatestValue = function(grid, rowsMaxSum = 0) { var rowsMaxArr = []; for (var i = 0; i &amp;lt; grid.length; i ++) { var row = grid[i], rowMax = findMaxAndIndex(row)[0], maxIndex = findM... </summary> </entry> <entry><title>图片懒加载</title><link href="https://hanxitao.github.io/posts/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/" rel="alternate" type="text/html" title="图片懒加载" /><published>2022-06-12T17:27:00+08:00</published> <updated>2022-06-12T17:27:00+08:00</updated> <id>https://hanxitao.github.io/posts/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</id> <content src="https://hanxitao.github.io/posts/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/" /> <author> <name>hanxitao</name> </author> <category term="javascript" /> <category term="EverydayLearnOfJs" /> <summary> 一、原理 图片懒加载技术主要通过监听图片资源容器是否出现在视口区域内，来决定图片是否被加载。那么实现图片懒加载技术的核心就是如何判断元素处于视口区域之内。 二、实现 思路： 给目标元素指定一张占位图片，将真实的图片链接存储在自定义属性中，通常是data-src。 监听与用户滚动行为相关的scroll事件。 在scroll事件处理程序中利用element.getBoundingClientRect()方法判断目标元素与视口的交叉状态。 当目标元素与视口的交叉状态大于0时，将真实的图片链接赋给目标元素的src属性或者backgroundImage属性。 2.1、scroll事件 scroll会被高频度地触发，而按照上述思路，必然会在scroll事件处理程序中出现大量的DOM操作，这可能会使页面... </summary> </entry> <entry><title>LeetCode之质数因子</title><link href="https://hanxitao.github.io/posts/%E8%B4%A8%E6%95%B0%E5%9B%A0%E5%AD%90/" rel="alternate" type="text/html" title="LeetCode之质数因子" /><published>2022-06-11T20:02:00+08:00</published> <updated>2022-06-11T20:02:00+08:00</updated> <id>https://hanxitao.github.io/posts/%E8%B4%A8%E6%95%B0%E5%9B%A0%E5%AD%90/</id> <content src="https://hanxitao.github.io/posts/%E8%B4%A8%E6%95%B0%E5%9B%A0%E5%AD%90/" /> <author> <name>hanxitao</name> </author> <category term="LeetCode" /> <summary> 一、题目：质数因子 功能:输入一个正整数，按照从小到大的顺序输出它的所有质因子（重复的也要列举）（如180的质因子为2 2 3 3 5） 二、示例 示例： 输入：180 输出：2 2 3 3 5 三、代码 function getCode(num) { let i = 2, arr = []; while (i &amp;lt;= num &amp;amp;&amp;amp; i * i &amp;lt;= num) { while (num % i === 0) { arr.push(i); num /= i; } i ++; } if (num != 1) { arr.push(num); } ... </summary> </entry> <entry><title>fixed定位相对于谁</title><link href="https://hanxitao.github.io/posts/fixed%E5%AE%9A%E4%BD%8D/" rel="alternate" type="text/html" title="fixed定位相对于谁" /><published>2022-06-10T02:37:00+08:00</published> <updated>2022-06-10T02:37:00+08:00</updated> <id>https://hanxitao.github.io/posts/fixed%E5%AE%9A%E4%BD%8D/</id> <content src="https://hanxitao.github.io/posts/fixed%E5%AE%9A%E4%BD%8D/" /> <author> <name>hanxitao</name> </author> <category term="css" /> <category term="EverydayLearnOfCss" /> <summary> 一、相对于浏览器 正常情况下，fixed定位是相对于浏览器的。 代码如下： &amp;lt;html lang="en"&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; body { background: gray; } .wrap { width: 200px; height: 200px; position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); background: violet; } &amp;lt;/style&amp;g... </summary> </entry> <entry><title>Vue指令之去除input值中间空格</title><link href="https://hanxitao.github.io/posts/Vue%E6%8C%87%E4%BB%A4%E4%B9%8B%E5%8E%BB%E9%99%A4input%E5%80%BC%E4%B8%AD%E9%97%B4%E7%A9%BA%E6%A0%BC/" rel="alternate" type="text/html" title="Vue指令之去除input值中间空格" /><published>2022-06-06T01:43:00+08:00</published> <updated>2022-06-06T02:02:15+08:00</updated> <id>https://hanxitao.github.io/posts/Vue%E6%8C%87%E4%BB%A4%E4%B9%8B%E5%8E%BB%E9%99%A4input%E5%80%BC%E4%B8%AD%E9%97%B4%E7%A9%BA%E6%A0%BC/</id> <content src="https://hanxitao.github.io/posts/Vue%E6%8C%87%E4%BB%A4%E4%B9%8B%E5%8E%BB%E9%99%A4input%E5%80%BC%E4%B8%AD%E9%97%B4%E7%A9%BA%E6%A0%BC/" /> <author> <name>hanxitao</name> </author> <category term="Vue" /> <category term="EverydayLearnOfVue" /> <summary> 一、代码实现 js代码如下： // 获取input元素 function getInput(el) { let inputEle; if (el.tagName !== 'INPUT') { inputEle = el.querySelector('input'); } else { inputEle = el; } return inputEle; } // 去除字符串中的空格 function removeSpaceOfString(str) { let arr = str.split(' '); for (let i = arr.length - 1; i &amp;gt; -1; i --) { if (arr[i] === ' ') { arr.spli... </summary> </entry> </feed>
